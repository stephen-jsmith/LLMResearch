{"prompt": "What operations can I perform through the Files service?", "completion": "Through the Files service users can perform file listing, uploading, and various operations such as move, copy, mkdir and delete. The service also supports transferring files from one Tapis system to another."}
{"prompt": "How does Tapis handle file listings on S3 type systems?", "completion": "File listings on S3 type systems have some special considerations. Objects in an S3 bucket do not have a hierarchical structure. There are no directories. Everything is an object associated with a key. For S3 the recurse flag is ignored and all objects with keys matching the path as a prefix are always included. When the path is an empty string all objects in the bucket with a prefix matching rootDir will be included."}
{"prompt": "How are symbolic links handled during a move or copy operation on Linux systems?", "completion": "During a move or copy, if a symbolic link is encountered, it will be handled based on whether the link is the source or target and if it points to a file or directory. If the link is the source and points to a file or directory, a new symbolic link is created that points to the same place as the source. If the destination path includes directories that do not exist, they will be created. If the link is the destination and points to a file, the destination is replaced by the source. If it points to a directory, the new file, directory, or link is created inside of the existing directory."}{"prompt": "How do I create a directory on a Tapis system?", "completion": "To create a directory on a Tapis system at the given path, issue a mkdir request. This operation is currently supported for LINUX, IRODS and GLOBUS type systems."}

{"prompt": "How do I delete a file or folder on a Tapis system?", "completion": "To delete a file or folder, issue a DELETE request for the path to be removed. For an S3 system, the path will represent either a single object or all objects in the bucket with a prefix matching the system rootDir if the path is the empty string."}

{"prompt": "How does Tapis handle symbolic links and special files on Linux Systems during a delete operation?", "completion": "If Tapis encounters a symbolic link during a delete operation, the link will be deleted. The file or directory that the link points to will be unaffected. If the delete encounters a special file (such as a device file or fifo, etc), it will not be deleted, and an error will be returned. If this is in the middle of a recursive delete operation, some files may have been already deleted."}{"prompt": "How can I initiate a data transfer between two systems in Tapis?", "completion": "To initiate a data transfer between two systems in Tapis, you need to specify the source system id, the directory of the data to be transferred, and the destination system id. For example, if user `aturing` needs to transfer data from `aturing-storage` located in directory `/experiments/experiment-1/` to `aturing-compute`, a request specifying these details will initiate the transfer."}

{"prompt": "How does Tapis handle symbolic links during data transfer on Linux Systems?", "completion": "During data transfer, Tapis will always \"follow links\". If the source of the transfer is a symbolic link to a file or directory, it will transfer the file or directory that is pointed to. If it doesn't exist, it will be an error. In the case of a directory transfer where one of the entries in the directory encountered is a symbolic link, it will be resolved in the same way. However, symbolic links can create situations where infinite recursion can occur. To prevent this, transfers are limited by a recursion depth, with the current maximum depth being 20."}

{"prompt": "How can I grant and revoke permissions to specific users in Tapis?", "completion": "In Tapis, you can grant permissions to specific users by specifying the system ID, the path, and the username of the user you wish to grant permissions to. For example, if user `aturing` wants to allow `aeinstein` to view the results of an experiment located at `/experiment1` on his system `aturing-storage`, he can issue a request with a JSON body specifying these details. To revoke permissions, `aturing` can issue a DELETE request on the path and specify the username of the user whose access he wants to revoke."}{"prompt": "How can I unshare a path publicly?", "completion": "To unshare a path publicly, you need to remove public sharing for that path on the system. Please note that you must be the owner of the system to do this."}
{"prompt": "What is the PostIts service and how does it work?", "completion": "The PostIts service is a URL service that allows you to create pre-authenticated, disposable URLs to files, directories, buckets, etc in the Tapis Platform's Files service. You have control over the lifetime and number of times the URL can be redeemed, and you can expire a PostIt at any time. The most common use of PostIts is to create URLs to files so that you can share with others without having to upload them to a third-party service."}
{"prompt": "How can I create a PostIt?", "completion": "To create a PostIt, send a POST request to the Files service's Create PostIt endpoint. The url will contain the systemId and the path that will be shared. The body of the post will contain a json document which describes how long the PostIt is valid, and how many times it can be redeemed. There are default values for each of these parameters if they are not included. If the number of times the PostIt may be redeemed (allowedUses) is set to -1, the PostIt may be redeemed an unlimited number of times. The expiration (validSeconds) must always contain a value. If one is not provided, there is a default that is used. The maximum value of 'validSeconds' is the maximum integer value in Java (Integer.MAX_VALUE = 2147483647)."}{"prompt": "How can I retrieve a single PostIt?", "completion": "Retrieving a single PostIt can be done by issuing a GET request containing the id of the PostIt. This does not add to the redeem count and allows the owner of the PostIt or a tenant admin to view the PostIt. This could be used to see the number of times it's been retrieved, total number of uses allowed, expiration date, etc."}

{"prompt": "How can I update a PostIt?", "completion": "The creator of a PostIt and tenant admins can update a PostIt. When updating a PostIt, the id of the posted is sent as part of the url, and a body containing allowedUses and/or validSeconds can be specified. The validSeconds parameter will add to the date and time as of the update request to compute the new expiration. It does not extend the current expiration by that many seconds. If you need to update the url, you will need to delete or expire this PostIt and create a new one."}

{"prompt": "How can I redeem a PostIt?", "completion": "To redeem a PostIt, use the redeemUrl from the PostIt to make a non-authenticated HTTP GET request. By default if the PostIt you are redeeming points to a path that is a directory, you will get a zip file, and if it's a regular file, you will get an uncompressed file. If you want to force a file to be compressed, you can specify the query parameter zip and set it to true. The redeem URL can also be pasted into the address bar of your favorite browser, and it will download the file pointed to by the PostIt."}