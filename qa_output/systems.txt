{"prompt": "What is the purpose of a Tapis system?", "completion": "A Tapis system represents a server or collection of servers exposed through a single host name or IP address. Each system is associated with a specific tenant. A system can be used for running a job, which includes staging files to a system in preparation for running a job, executing a job on a system, and archiving files and data on a remote system after job execution. A system can also be used for storing and retrieving files and data."}

{"prompt": "What are the required attributes when creating a system?", "completion": "When creating a system the required attributes are: id, systemType, host, defaultAuthnMethod and canExec. Depending on the type of system and specific values for certain attributes there are other requirements."}

{"prompt": "How do I register credentials for a Tapis system?", "completion": "To register credentials for a Tapis system, you need to create a local file with your public and private keys. The keys must be encoded on a single line with embedded newline characters. Then, you can use the PySDK or CURL to send a POST request to the Tapis API. An optional attribute loginUser may be included in the request body in order to map the Tapis user to a username to be used when accessing the system."}{"prompt": "How can I convert a multi-line private key into a single line for use with Tapis?", "completion": "You can use the following linux command to convert a multi-line private key into a single line: `cat $privateKeyFile | awk -v ORS='\\n' '1'`"}
{"prompt": "What steps should I take if I encounter problems when using an ssh keypair as credentials in Tapis?", "completion": "Here are some suggestions on what to check: Ensure that public and private keys are each on one line in the json file and newline characters in private key are properly encoded. Make sure the keypair is not of type OPENSSH and does not have a passphrase. Check that the public key has been added to the authorized_keys file for the target user. The file should be ~/.ssh/authorized_keys. Ensure that the file ~/.ssh/authorized_keys has proper permissions and that MFA is not enabled for the target host."}
{"prompt": "How can I register credentials for a GLOBUS type system in Tapis?", "completion": "For a GLOBUS type system, you will need to use the TOKEN authentication method and generate an `accessToken` and `refreshToken` using two special-purpose System service endpoints. Please note that your Tapis site installation must have been configured by the site administrator to support Globus."}{"prompt": "How can I retrieve details for all systems I own using CURL?", "completion": "You can retrieve details for all systems you own using CURL with the following command: `$ curl -H \"X-Tapis-Token: $JWT\" https://tacc.tapis.io/v3/systems?select=allAttributes`. The response should contain a list of items similar to the single listing shown above."}
{"prompt": "How can I create a child system?", "completion": "To create a child system, you need to create a local file (for example child_system_example.json) with the following: `{\"id\": \"my-child-<userid>\", \"effectiveUserId\": \"${apiUserId}\", \"rootDir\": \"/home/<userid>\"}`. Replace *<userid>* with your username and ensure that the root directory path is correct. Then use the create child system REST endpoint to create the child system. If you're using PySDK, you can use the following code: `import json from tapipy.tapis import Tapis t = Tapis(base_url='https://tacc.tapis.io', username='<userid>', password='************') with open('child_system_example.json', 'r') as openfile: child_system = json.load(openfile) t.systems.createChildSystem(parentId=\"parent-system\", **child_system)`. If you're using CURL, you can use the following command: `$ curl -X POST -H \"content-type: application/json\" -H \"X-Tapis-Token: $JWT\" https://tacc.tapis.io/v3/systems/parent-system/createChildSystem -d @child_system_example.json`."}
{"prompt": "What fields are maintained independently for child systems?", "completion": "The fields that are maintained independently for child systems are: id, owner, enabled, effectiveUserId, rootDir, deleted, created, and updated. During the creation of a child system, any of these fields may be specified except for created, updated and deleted. All other fields are taken from the parent system."}{"prompt": "How can I update a child system?", "completion": "Updates to a child system are done just like any other system, however, only certain fields may be updated for a child system. These fields can be updated through special endpoints. For example, 'deleted' and 'enabled' are updated through the endpoints for deleting, undeleting, enabling and disabling."}

{"prompt": "How can I unlink a child system from its parent system?", "completion": "A child system may be unlinked from its parent using the 'unlinkFromParent' endpoint. This is a permanent operation and cannot be undone. This will make the child a standalone system with all of its current settings. If the owner of the child system wants to unlink the child from its parent, they may use the 'unlinkFromParent' endpoint. The owner of a parent system can also decide to unlink child systems from the parent using the 'unlinkChildren' endpoint."}

{"prompt": "What are the minimal definition and restrictions when creating a system?", "completion": "When creating a system the required attributes are: 'id', 'systemType', 'host', 'defaultAuthnMethod' and 'canExec'. Depending on the type of system and specific values for certain attributes there are other requirements. For example, if 'systemType' is S3 then 'bucketName' is required, 'canExec' and 'isDtn' must be false. If 'systemType' is LINUX or IRODS then 'rootDir' is required and must begin with '/'. There are also restrictions based on other attributes such as 'effectiveUserId', 'isDtn', 'canExec', and 'canRunBatch'."}{"prompt": "What is the sharing feature in Tapis?", "completion": "Sharing in Tapis is a higher level approach to granting access. The sharing API allows you to share a system with a set of users as well as share publicly with all users in a tenant. Sharing provides `READ+EXECUTE` access. When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the Files service. Tapis permissions and sharing are independent of native permissions enforced by the underlying system host."}
{"prompt": "How are authentication credentials handled in Tapis?", "completion": "At system creation time, the authentication credentials may be specified if the effective access user *effectiveUserId* is a specific user and not a dynamic user. If the effective access user is dynamic, then authentication credentials for any user allowed to access the system must be registered in separate API calls. The Systems service does not store credentials. Credentials are persisted by the Security Kernel service and only specific Tapis services are authorized to retrieve credentials."}
{"prompt": "What does the deletion feature do in Tapis?", "completion": "In Tapis, a system may be deleted and undeleted. Deletion means the system is marked as deleted and is no longer available for use. By default, deleted systems will not be included in searches and operations on deleted systems will not be allowed. When listing systems, the query parameter *showDeleted* may be used in order to include deleted systems in the results."}{"prompt": "What does the 'authnMethod' attribute represent in the Credential Attributes Table?", "completion": "The 'authnMethod' attribute in the Credential Attributes Table indicates the authentication method associated with a retrieved credential. When a credential is retrieved, it is for a specific authentication method. The possible methods include PASSWORD, PKI_KEYS, ACCESS_KEY, and TOKEN."}

{"prompt": "What is the purpose of the 'inputMode' attribute in the KeyValuePair Attributes Table?", "completion": "The 'inputMode' attribute in the KeyValuePair Attributes Table indicates how an argument is to be treated when processing individual job requests. The possible modes include REQUIRED, FIXED, INCLUDE_ON_DEMAND, and INCLUDE_BY_DEFAULT. The default mode is INCLUDE_BY_DEFAULT."}

{"prompt": "What does the 'notes' attribute represent in the KeyValuePair Attributes Table?", "completion": "The 'notes' attribute in the KeyValuePair Attributes Table represents simple metadata in the form of a Json object. This attribute is not used by Tapis."}{"prompt": "What is the purpose of the 'name' attribute in the LogicalQueue Attributes Table?", "completion": "The 'name' attribute in the LogicalQueue Attributes Table is used to provide a name for the logical queue. This typically matches or is a variant of the HPC queue name."}

{"prompt": "How can I specify the maximum number of jobs that can be queued or running in a logical queue?", "completion": "You can specify the maximum total number of jobs that can be queued or running in a logical queue using the 'maxJobs' attribute in the LogicalQueue Attributes Table."}

{"prompt": "How can I search for systems using a GET request?", "completion": "To search when using a GET request to the `systems` endpoint, you can specify a list of search conditions using a query parameter named `search`. Each search condition must be surrounded with parentheses, have three parts separated by the character `.` and be joined using the character `~`. All conditions are combined using logical AND. For example: `?search=(<attribute_1>.<op_1>.<value_1>)~(<attribute_2>.<op_2>.<value_2>)~ ... ~(<attribute_N>.<op_N>.<value_N>)`"}{"prompt": "How can I perform a search using a GET request on the dedicated endpoint?", "completion": "To perform a search using a GET request on the dedicated endpoint, you can send a GET request to the search endpoint. A list of search conditions may be specified using a series of query parameters, one for each attribute. All conditions are combined using logical AND. The general form for specifying the query parameters is as follows: `?<attribute_1>.<op_1>=<value_1>&<attribute_2>.<op_2>=<value_2>)& ... &<attribute_N>.<op_N>=<value_N>`. Supported operators include `eq`, `neq`, `gt`, `gte`, `lt`, `lte`, `in`, `nin`, `like`, `nlike`, `between`, `nbetween`."}
{"prompt": "How can I perform a search using a POST request on the dedicated endpoint?", "completion": "To perform a search using a POST request on the dedicated endpoint, you need to send a POST request to the endpoint `systems/search/systems`. The request body must contain json with a top level property name of `search`. The `search` property must contain an array of strings specifying the search criteria in an SQL-like syntax. The array of strings are concatenated to form the full search query. The full query must be in the form of an SQL-like `WHERE` clause. Note that not all SQL features are supported."}
{"prompt": "How can I select specific fields when retrieving systems?", "completion": "When retrieving systems, the fields to be returned may be specified as a comma separated list using a query parameter named `select`. Attribute names may be given using Camel Case or Snake Case. Special select keywords are supported: `allAttributes` and `summaryAttributes`. By default all attributes are returned when retrieving a single resource via the endpoint *systems/\<system_id\>*. By default summary attributes are returned when retrieving a list of systems. Specifying nested attributes is not supported. The attribute `id` is always returned."}{"prompt": "How can I sort the results of my query in ascending or descending order?", "completion": "You can sort the results of your query by using the `orderBy` query parameter. The value of this parameter is the attribute name you want to sort on, with an optional sort direction. The general format is `<attribute_name>(<dir>)`. The direction may be `asc` for ascending or `desc` for descending. The default direction is ascending. For example, `orderBy=id(asc)` or `orderBy=name(desc),created`."}

{"prompt": "How can I limit the number of results returned by my query?", "completion": "You can limit the number of results returned by your query by using the `limit` query parameter. For example, `limit=10` will limit the number of items returned to 10. If you want to return an unlimited number of items, you can use 0 or less. The default limit is 100. You can also use the `skip` parameter to skip a number of items, or the `startAfter` parameter to specify where to start when sorting."}

{"prompt": "What does the `listType` query parameter do?", "completion": "The `listType` query parameter allows you to see additional resources that are available to you. By default, you will only see the resources that you own. If you set `listType` to `OWNED`, you will only see items owned by you. If you set it to `SHARED_PUBLIC`, you will only see items shared publicly. If you set it to `ALL`, you will see all items you are authorized to view."}