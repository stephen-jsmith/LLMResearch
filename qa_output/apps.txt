{"prompt": "What are the required attributes when creating a Tapis application?", "completion": "When creating a Tapis application, the required attributes are: `id`, `version` and `containerImage`. Depending on the type of application and specific values for certain attributes there are other requirements. For instance, if `archiveSystemId` is specified then `archiveSystemDir` must be specified."}
{"prompt": "What is the purpose of a Tapis application and what does it represent?", "completion": "A Tapis application represents all the information required to run a Tapis job on a Tapis system and produce useful results. Each application is versioned and is associated with a specific tenant and owned by a specific user who has special privileges for the application. An application definition includes information which allows the Jobs service to stage input prior to launching the application, launch the application, monitor the application during execution, and archive output after application execution."}
{"prompt": "How is the runtime environment of a Tapis job determined?", "completion": "The runtime environment of a Tapis job is determined by values in the job submit request, the application definition and the execution system definition. Generally speaking, for values that can be assigned in multiple places, the values in the job submit request override those in the application definition, which in turn override those in the system definition. However, there are special cases where the values from different definitions are merged."}{"prompt": "How can I retrieve details for a specific application using CURL?", "completion": "To retrieve details for a specific application using CURL, you can use the following command: `$ curl -H \"X-Tapis-Token: $JWT\" https://tacc.tapis.io/v3/apps/tacc-sample-app-<userid>`. Replace `<userid>` with your user ID."}

{"prompt": "What information is returned when retrieving details for an application?", "completion": "When retrieving details for an application, the response includes information such as the tenant, id, version, description, owner, enabled status, runtime, runtime version, container image, job type, max jobs, max jobs per user, strict file inputs, job attributes, tags, notes, uuid, deleted status, created and updated timestamps."}

{"prompt": "What does the 'enabled' field in the application details response indicate?", "completion": "The 'enabled' field in the application details response indicates whether the application is currently enabled or not. If it is set to true, the application is enabled."}{"prompt": "How can I retrieve details for all applications using CURL?", "completion": "You can retrieve details for all applications using CURL with the following command: `$ curl -H \"X-Tapis-Token: $JWT\" https://tacc.tapis.io/v3/apps?select=allAttributes`. The response should contain a list of items similar to the single listing shown above."}
{"prompt": "What are the required attributes when creating an application?", "completion": "When creating an application the required attributes are: *id*, *version* and *containerImage*. Depending on the type of application and specific values for certain attributes there are other requirements. For instance, if *archiveSystemId* is specified then *archiveSystemDir* is required."}
{"prompt": "What permissions are available in the Tapis applications?", "completion": "The permissions model allows for fine grained access control of Tapis applications. Permissions are specified as either `*` for all permissions or some combination of the following specific permissions: `(\"READ\",\"MODIFY\",\"EXECUTE\")`. Specifying permissions in all lower case is also allowed. Having `MODIFY` implies `READ`."}{"prompt": "What is the purpose of the 'tenant' attribute in the application attributes table?", "completion": "The 'tenant' attribute in the application attributes table is used to define the name of the tenant for which the application is defined. It is part of a unique identifier for the application, combined with the 'version' and 'id' attributes."}

{"prompt": "What are the allowed characters for the 'id' and 'version' attributes in the application attributes table?", "completion": "The allowed characters for the 'id' and 'version' attributes are alphanumeric characters [0-9a-zA-Z] and special characters [-._~]. These attributes must be URI safe as per RFC 3986."}

{"prompt": "What does the 'strictFileInputs' attribute indicate in the application attributes table?", "completion": "The 'strictFileInputs' attribute indicates whether a job request is allowed to have unnamed file inputs. If set to TRUE, a job request may only use named file inputs defined in the app. The default value is FALSE."}{"prompt": "What is the purpose of the 'description' attribute in the JobAttributes Table?", "completion": "The 'description' attribute in the JobAttributes Table is used to provide a description when this application is used to run a job. It can act as a template to be filled in at job runtime using macros."}

{"prompt": "What is the default directory for application assets staging, and can it be customized?", "completion": "The default directory for application assets staging is \${JobWorkingDir}/jobs/\${JobUUID}. This is specified in the 'execSystemExecDir' attribute. It can be customized using macro template variables such as \${JobWorkingDir}."}

{"prompt": "What does the 'archiveOnAppError' attribute indicate in the JobAttributes Table?", "completion": "The 'archiveOnAppError' attribute in the JobAttributes Table indicates whether the outputs should be archived if there is an error while running the job. The default value is TRUE, meaning outputs will be archived by default in case of an error."}{"prompt": "What is the purpose of the 'appArgs' attribute in the ParameterSet Attributes Table?", "completion": "The 'appArgs' attribute is used for passing command line arguments to the application."}
{"prompt": "What does the 'archiveFilter' attribute in the ParameterSet Attributes Table do?", "completion": "The 'archiveFilter' attribute sets the files to include or exclude when archiving. By default, it includes all files in the 'execSystemOutputDir'."}
{"prompt": "What does the 'inputMode' attribute in the Arg Attributes Table indicate?", "completion": "The 'inputMode' attribute indicates how an argument is to be treated when processing individual job requests. It has four modes: REQUIRED, FIXED, INCLUDE_ON_DEMAND, and INCLUDE_BY_DEFAULT."}{"prompt": "What does the 'key' attribute represent in the KeyValuePair Attributes Table?", "completion": "The 'key' attribute in the KeyValuePair Attributes Table represents the name of an environment variable. It is required."}

{"prompt": "What does the 'inputMode' attribute indicate in the KeyValuePair Attributes Table?", "completion": "The 'inputMode' attribute in the KeyValuePair Attributes Table indicates how an argument is to be treated when processing individual job requests. It has several modes including REQUIRED, FIXED, INCLUDE_ON_DEMAND, and INCLUDE_BY_DEFAULT. The default mode is INCLUDE_BY_DEFAULT."}

{"prompt": "What does the 'autoMountLocal' attribute mean in the FileInput Attributes Table?", "completion": "The 'autoMountLocal' attribute in the FileInput Attributes Table indicates if the Jobs service should automatically mount file paths into containers. The default setting is TRUE, but it can be set to FALSE to allow the user complete control using 'containerArg' parameters."}{"prompt": "What are the attributes of the FileInputArray?", "completion": "The attributes of the FileInputArray are 'name', 'description', 'inputMode', 'sourceUrls', and 'targetDir'. The 'name' attribute is a string that serves as an identifying label associated with the input and is required at creation time. The 'description' attribute is an optional string that provides additional information about the input. The 'inputMode' attribute is an enum that can take the values REQUIRED, OPTIONAL, or FIXED, with OPTIONAL being the default. The 'sourceUrls' attribute is an array of sources used by the Jobs service when staging file inputs. The 'targetDir' attribute is a string that specifies the target directory used by the Jobs service when staging file inputs."}

{"prompt": "How can I search for applications using a GET request?", "completion": "To search for applications using a GET request, you can specify a list of search conditions using a query parameter named 'search'. Each search condition must be surrounded with parentheses, have three parts separated by the character '.', and be joined using the character '~'. All conditions are combined using logical AND. The general form for specifying the query parameter is as follows: ?search=(<attribute_1>.<op_1>.<value_1>)~(<attribute_2>.<op_2>.<value_2>)~ ... ~(<attribute_N>.<op_N>.<value_N>). Attribute names can be specified using Camel Case or Snake Case. Supported operators include 'eq', 'neq', 'gt', 'gte', 'lt', 'lte', 'in', 'nin', 'like', 'nlike', 'between', and 'nbetween'."}

{"prompt": "How can I perform a more complex search using a POST request on the dedicated endpoint?", "completion": "To perform a more complex search, you can send a POST request to the endpoint 'apps/search/apps'. The request body must contain json with a top level property name of 'search'. The 'search' property must contain an array of strings specifying the search criteria in an SQL-like syntax. The array of strings are concatenated to form the full search query. The full query must be in the form of an SQL-like 'WHERE' clause. Note that not all SQL features are supported. For example, to search for apps that are owned by 'jdoe' and of type 'FORK' or owned by 'jsmith' and allow for maxJobs less than '5', you can create a local file named 'app_search.json' with the appropriate json and use a CURL command to execute the search."}{"prompt": "How can I specify which fields to be returned when retrieving applications?", "completion": "When retrieving applications, the fields to be returned can be specified as a comma-separated list using a query parameter named `select`. Attribute names can be given using Camel Case or Snake Case. For example, to return only the attributes `version` and `containerImage`, the CURL command would look like this: `$ curl -H \"X-Tapis-Token: $JWT\" https://tacc.tapis.io/v3/apps?select=version,containerImage`."}

{"prompt": "How can I limit the number of results returned by a query?", "completion": "You can limit the number of results returned by a query using the `limit` query parameter. For example, `limit=10` will limit the number of items returned to 10. You can also use the `skip` parameter to skip a number of items, or the `startAfter` parameter to specify where to start when sorting. For example, `limit=10&orderBy=id(asc),created(desc)&startAfter=101`."}

{"prompt": "What does the `listType` query parameter do?", "completion": "The `listType` query parameter allows you to see additional resources that are available to you. By default, you will only see the resources that you own. The options for `listType` are `OWNED` to include only items owned by you, `SHARED_PUBLIC` to include only items shared publicly, and `ALL` to include all items you are authorized to view."}{"prompt": "What is the command to install the Tapis Python SDK?", "completion": "The command to install the Tapis Python SDK is `pip3 install tapipy`."}
{"prompt": "What version of Python does `tapipy` work with?", "completion": "`tapipy` works with Python 3."}
{"prompt": "What is the Tapis Python SDK used for?", "completion": "The Tapis Python SDK, tapipy, is used to interact with the TACC-hosted Abaco platform in Python."}