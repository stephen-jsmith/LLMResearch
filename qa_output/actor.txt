{"prompt": "What is Abaco?", "completion": "Abaco is an NSF-funded web service and distributed computing platform providing functions-as-a-service (FaaS) to the research computing community. It implements functions using the Actor Model of concurrent computation. Each actor in Abaco is associated with a Docker image, and actor containers are executed in response to messages posted to their inbox. Abaco offers three primary higher-level capabilities: Reactors for event-driven programming, Asynchronous Executors for scaling out function calls within running applications, and Data Adapters for creating microservices from disparate sources of data."}

{"prompt": "How do I get started with Abaco?", "completion": "To get started with Abaco, you need to set up the necessary accounts and install the required software. This includes creating a TACC account and a Docker account. You will also need to install the Tapis Python SDK. Once these steps are completed, you can move on to the Abaco Quickstart, where you will create and execute your first Abaco actor."}

{"prompt": "How do I authenticate with the Tapis APIs?", "completion": "Authentication and authorization to the Tapis APIs use OAuth2. You first need to create a Tapis Client object using your TACC username and password. Then, you can exchange your credentials for an access token. This token is used to determine your identity and permissions. The token is stored and passed by the tapipy `t` object, so you don't have to manually provide the token when using the tapipy operations. The token will expire after 4 hours, at which time you will need to generate a new token."}{"prompt": "How do I build a Docker image from a Dockerfile?", "completion": "You can build a Docker image from a Dockerfile, which is a text file that serves as a recipe for creating images. The instructions within a Dockerfile either add files/folders to the image, add metadata to the image, or both. After creating your Dockerfile, you can build your image and push it to Docker Hub using the `docker build` and `docker push` commands."}

{"prompt": "How do I register a Docker image as an Abaco actor?", "completion": "To register a Docker image as an Abaco actor, you can use the `actors.add()` method from the tapipy library and pass the arguments describing the actor you want to register through the `body` parameter. After registration, Abaco assigns an id to the actor and associates it with the image, which it begins pulling from the public Docker Hub. You can check the details of your actor, including its status, using the `actors.get()` method."}

{"prompt": "How do I execute an Abaco actor and retrieve the logs?", "completion": "To execute an Abaco actor, you can send it a message using the `send_message()` method. Abaco queues up an execution for your actor and responds with JSON, including an id for the execution contained in the `execution_id`. You can retrieve the details about an execution, including its status, using the `get_execution()` method. The Abaco system collects all standard out from an actor execution and makes it available via the `logs` endpoint. You can retrieve the logs from the execution using the `get_execution_logs()` method, passing out `actor_id` and your `execution_id`."}{"prompt": "How can I provide sensitive information to the actor in Abaco?", "completion": "You can provide sensitive information to the actor in Abaco by using the `default_environment`. This cannot be put in the image for security reasons."}

{"prompt": "How can I run specific actors on dedicated resources in Abaco?", "completion": "Abaco supports running specific actors within a given tenant on dedicated and/or specialized hardware for performance reasons. This is accomplished through the use of actor `queues`. If you need to run actors on dedicated resources, you should talk to the Abaco development team about your use case."}

{"prompt": "What is the `context` in Abaco and what information does it provide?", "completion": "In Abaco, when an actor container is launched, information about the execution is injected into a number of environment variables. This information is collectively referred to as the `context`. It provides a complete list of variable names and their description, including the id of the actor, the Docker image used to launch this actor container, the id of the worker for the actor overseeing this execution, an OAuth2 access token representing the user who registered the actor, and more."}{"prompt": "What is the runtime environment in Abaco?", "completion": "The runtime environment in Abaco is the environment in which an Abaco actor container runs. It has been built to accommodate a number of typical use cases encountered in research computing in a secure manner."}

{"prompt": "How does Abaco handle the UID and GID when launching an actor container?", "completion": "When Abaco launches an actor container, it instructs Docker to execute the process using the UID and GID associated with the TACC account of the owner of the actor. This guarantees that an Abaco actor will have exactly the same accesses as the original author of the actor and that files created or updated by the actor process will be owned by the underlying API user. Abaco API users that have elevated privileges within the platform can override the UID and GID used to run the actor when registering the actor."}

{"prompt": "What happens when a message is sent to an Abaco actor?", "completion": "When a message is sent to an Abaco actor, the actor will create an execution with a unique `execution_id` tied to it that will show results, time running, and other stats. Executions also have logs, and when the logs are called for, you'll receive the command line logs of your running execution. Each execution will have exactly one message that can be processed."}Insufficient data is provided.