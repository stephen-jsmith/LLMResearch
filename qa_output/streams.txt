{"prompt": "How are projects defined in the hierarchy of Streams resources?", "completion": "Projects are defined at a top level in the hierarchy of Streams resources. A user registers a project by providing metadata information such as the principal Investigator, project URL, funding resource, etc. A list of authorized users can be added to various project roles to have a controlled access over the project resources. When a project is first registered, a collection is created in the back-end MongoDB. User permissions to access this collection are then set up in the security kernel. Every request to access the project resource or documents within (i.e sites, instruments, variables) goes through a security kernel check and only the authorized user requests are allowed to be processed."}
{"prompt": "What is a site in the context of Streams hierarchy?", "completion": "A site is a geographical location that may hold one or more instruments. Sites are next in the streams hierarchy and they inherit permissions from the projects. Project owners can create sites by providing the geographical information such as latitude, longitude and elevation of the site or GeoJSON encoded spatial information. This spatial information is useful when searching sites or data based on location. In the back-end database a site is represented as a JSON document within the project collection. Site permissions are inherited from the project."}
{"prompt": "What are instruments in the context of Streams API?", "completion": "Instruments are physical entities that may have one or more embedded sensors to sense various parameters such as temperature, relative humidity, specific conductivity, etc. These sensors referred to as variables in Streams API generate measurements, which are stored in the influxDB along with a ISO8601 timestamp. Instruments are associated with specific sites and projects. Information about the instruments such as site and project ids, name and description of the instrument, etc. are stored in the mongoDB sites JSON document."}{"prompt": "What are the different types of channel actions that can be defined?", "completion": "The different types of channel actions that can be defined are Actor, Job, Slack, Discord, and HTTP Webhook. Each of these actions has different attributes and parameters that need to be defined. For example, the Actor action requires a method, actor_id, and message. The Job action requires a method and job_param. The Slack, Discord, and HTTP Webhook actions require a method, webhook_url, and message. The HTTP Webhook action also requires a data_field."}

{"prompt": "How are permissions managed in the Streams service?", "completion": "Permissions in the Streams service are managed using roles. There are three types of roles: admin, manager, and user. Admins have elevated privileges and can create, update, or delete any of the Streams resources. Managers can perform all read and write operations on Streams resources, but cannot delete them. Users can only perform read operations on the resources and are not authorized to write or delete the resources. When a user creates a project, channel, or template, an admin role is created in the Security Kernel and is assigned to the requesting user."}

{"prompt": "What is the role of the 'method' attribute in channel actions?", "completion": "The 'method' attribute in channel actions is used to specify the type of action that should be performed. For example, if the method is set to 'ACTOR', it means that the action is related to an actor. If the method is set to 'JOB', it means that the action is related to a job. Similarly, if the method is set to 'SLACK', 'DISCORD', or 'WEBHOOK', it means that the action is related to sending a message to Slack, Discord, or a HTTP Webhook respectively."}{"prompt": "How can I list the user roles on a project, channel or template?", "completion": "To list the user roles on a project, channel or template, you need to provide three parameters: resource_type (project/channel/template), resource_id (project_id/channel_id/template_id), and user (username for whom roles are to be checked). The requesting user must have one of the three roles (admin, manager, user) on the resource."}

{"prompt": "What are the conditions for granting roles to users?", "completion": "Roles can be granted by admins or managers. Admins can grant any of the three roles to other users, while managers can only grant manager and user roles. Users do not have privileges to grant roles. Self role granting is not permitted. The role is granted only if the requesting user has same or higher roles than the role name specified in the request body. If the user already has the role, no action is taken."}

{"prompt": "Who can revoke roles and under what conditions?", "completion": "Only users in the admin role are capable of revoking any of the three roles: admin, manager, and user for other users. Self role revoking is not permitted. Users in manager and user role are not capable of revoking roles."}