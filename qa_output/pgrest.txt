{"prompt": "What are the two primary collections in the PgREST API?", "completion": "The two primary collections in the PgREST API are the Management API and the Data API. The Management API, provided at the URL `/v3/pgrest/manage`, includes endpoints for managing the collection of tables, views, stored procedures, and other objects defined in the hosted Postgres database server. The Data API, available at the URL `/v3/pgrest/data`, is used to create, update, and read the rows within the corresponding tables."}
{"prompt": "How does PgREST handle authentication?", "completion": "PgREST currently recognizes Tapis v2 and v3 authentication tokens and uses these for determining access levels. A valid Tapis v2 OAuth token should be passed to all requests to PgREST using the header `Tapis-v2-token`. Tapis v3 OAuth authentication tokens should be passed to all requests to PgREST using the header `X-Tapis-Token`. Additionally, PgREST should be accessible from the Tapis v3 Python SDK (tapipy) now with the addition of v3 authentication."}
{"prompt": "What are the universal roles established by PgREST and what permissions do they grant?", "completion": "PgREST establishes five universal roles: `PGREST_ADMIN` grants user read and write access to all objects in the `/manage` API as well as read and write access to all associated data in the `/data` API. `PGREST_ROLE_ADMIN` grants user role creation and management access to roles in the `/manage/roles` API. `PGREST_WRITE` grants user read and write access to all associated data in the `/data` API. `PGREST_READ` grants user read access to all associated data in the `/data` API. `PGREST_USER` grants permission to user `/views` API. Each view has additional permission rules though. Without any of the above roles, a user will not have access to any PgREST endpoints."}{"prompt": "How can I retrieve the description of a specific table using its id?", "completion": "You can retrieve a specific table by its `id` by making a GET request to `/v3/pgrest/manage/tables/{table_id}`. Replace `{table_id}` with the actual id of the table you want to retrieve."}

{"prompt": "How can I modify a table as a tenant admin?", "completion": "As a tenant admin, you can modify tables by making a PUT request to `/v3/pgrest/manage/tables/{table_id}`. This feature is only available to admins. You can perform operations like changing the root_url, table_name, comments, endpoints, column_type, adding or dropping a column, dropping a default, or setting a new default on a column in a table. Only one operation is allowed per PUT request."}

{"prompt": "How can I manage and retrieve data stored on tables using the Data API?", "completion": "The Data API provides endpoints for managing and retrieving data stored on tables. For each table defined through the Management API, there is a corresponding endpoint within the Data API with URL `/v3/pgrest/data/{root_url}`, where `{root_url}` is the associated attribute on the table. You can list/create widgets, bulk update multiple widgets, get/update/delete a widget by id using the endpoints provided by the Data API."}{"prompt": "How can I create a new row in a table using PgREST?", "completion": "To create a new row in a table using PgREST, you need to send a POST request to the `/v3/pgrest/data/{root_url}` URL. The POST message body should be a JSON document providing values for each of the columns inside a single `data` object. The values will first be validated with the json schema generated from the columns data sent in on table creation. This will enforce data types, max lengths, and required fields. The row is then added to the table using pure SQL format and is fully ATOMIC."}
{"prompt": "How can I update an existing row in a table using PgREST?", "completion": "To update an existing row in a table using PgREST, you need to send a PUT request to the `/v3/pgrest/data/{root_url}/{id}` URL. The request message body should be a JSON document providing the columns to be updated and the new values. Only the fields provided in the PUT request body will be modified."}
{"prompt": "How can I retrieve rows from a table using PgREST?", "completion": "To retrieve data from the `/data` API, make an HTTP GET request to the associated URL; an HTTP GET to `/v3/pgrest/data/{root_url}` will retrieve all rows on the associated table, while an HTTP GET to `/v3/pgrest/data/{root_url}/{id}` will retrieve the individual row."}{"prompt": "How can I create a new view using the Views Manage API?", "completion": "To create a new view, you can make a POST request to the `/v3/pgrest/manage/views` endpoint. The request body should be a JSON formatted view definition. The view definition should include the following fields: `view_name`, `select_query`, `from_table`, and optionally `root_url`, `where_query`, `comments`, `permission_rules`, `raw_sql` (admins only), and `materialized_view_raw_sql` (admins only)."}
{"prompt": "What are the rules for creating a view definition?", "completion": "Each view definition can have the following rules: `view_name` (required), `select_query` (required), `from_table` (required), `root_url`, `where_query`, `comments`, `permission_rules`, `raw_sql` (admins only), and `materialized_view_raw_sql` (admins only). If `raw_sql` or `materialized_view_raw_sql` is used, `select_query`, `where_query`, and `from_table` are no longer allowed."}
{"prompt": "How can I refresh the data of a materialized view?", "completion": "If you have created a view using the `materialized_view_raw_sql` attribute, you can refresh the data of the materialized view manually. Data for materialized views is updated at creation, and at refreshes, there is not other automatic refreshing of the data. You can refresh the materialized view data by making a GET request to `https://tenant.tapis.io/v3/pgrest/manage/views/{view_id}/refresh`."}{"prompt": "How can I create a new role using the API?", "completion": "To create a new role, make a post to `/v3/pgrest/roles/` with a body such as: `{\"role_name\": \"PGREST_My_New_Role\", \"description\": \"A new role!\"}`. This would result in the creation of the `PGREST_My_New_Role` role. Remember, the `role_name` and `description` are required and the `role_name` must start with `PGREST_`."}

{"prompt": "How can I grant or revoke a role to a specific user?", "completion": "To grant or revoke a role to a specific username, make a post to `/v3/pgrest/roles/{role_name}` with a body such as: `{\"method\": \"grant\", \"username\": \"user3234\"}`. This would result in the user, `user3234` being granted the role, `PGREST_My_New_Role`. The `method` and `username` are required parameters. The `method` can be either \"grant\" or \"revoke\", specifying whether to revoke or grant the role to a user."}

{"prompt": "What are the restrictions on role management?", "completion": "Role management is solely allowed for users in the PGREST_ROLE_ADMIN role, or PGREST_ADMIN. These endpoints allow users to create, grant, and revoke SK roles to users. Modifiable roles all must start with `PGREST_`, this ensures users can't change roles that might matter to other services. Users cannot manage the `PGREST_ADMIN`, `PGREST_ROLE_ADMIN`, `PGREST_WRITE`, or `PGREST_READ` roles. However, users can grant or revoke the `PGREST_USER` role."}