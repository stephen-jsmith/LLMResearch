{"prompt": "What are the two built-in authorization mechanisms provided by Tapis?", "completion": "Tapis provides two built-in authorization mechanisms. The first facility is implemented using roles and permissions. These controls operate at a low level of abstraction and apply to the individual Tapis resources to which they are associated. The second facility, Tapis shared resources (or simply shared resources), operate at a higher level of abstraction by authorizing complex actions in Tapis."}

{"prompt": "How does the role-based access control (RBAC) work in Tapis?", "completion": "The Security Kernel (SK) in Tapis implements a distributed, role-based access control (RBAC) in which users are assigned roles that limit or allow access to resources. A role is simply a named entity with an owner. Access to specific resources is controlled by assigning roles to users. Tapis supports user-based APIs that check if a user has a certain role. A role can contain zero or more other roles. A contained role is the child of the containing role. A child role can have any number of parents, that is, be contained in any number of other roles. Roles form a forest of directed acyclic graphs. When checking whether a user has been assigned a particular role, SK APIs check whether the user has been assigned that role or any of its parent roles. When a user is assigned a role, the user is also implicitly assigned all the children of that role."}

{"prompt": "What is Tapis sharing and how does it work?", "completion": "Tapis sharing grants some implicit access to all resources needed to perform an action. It defines a runtime context in which limited Tapis authorization is implicitly granted to users performing an action. This context can span multiple services. For example, if a file path is shared with a user, then access to the Tapis system on which the file resides is implicitly granted when the user attempts access through the Files service. Implicit access applies within a certain context and does not apply outside of that context. Implicit authorizations apply only to Tapis resources. Tapis sharing also supports granting public access to resources. The public-grantee access designation allows all users in a tenant access to the shared resource. Where supported, the public-grantee-no-authn access designation grants access to all users, even those that have not authenticated with Tapis."}{"prompt": "What is a Shared Application Context (SAC) in Tapis?", "completion": "A Shared Application Context (SAC) in Tapis is a concept that recognizes that applications run in the context of a Tapis job. This context is leveraged by multiple, cooperating services to allow limited implicit access to all the resources needed to run a job. This means that for certain resources, the user running the job will have the application owner's authorizations in addition to their own. Users are able to access systems and file paths which they cannot normally access but the application owner can access."}

{"prompt": "What are the SAC-eligible attributes in Tapis?", "completion": "The SAC-eligible attributes in Tapis are: execSystemId, execSystemExecDir, execSystemInputDir, execSystemOutputDir, archiveSystemId, archiveSystemDir, fileInputs sourceUrl, and fileInputs targetPath. These attributes of application definitions are SAC-eligible, meaning that implicit access to the resources they designate can be granted to jobs running in a SAC."}

{"prompt": "How does Tapis handle authorization during job execution in a Shared Application Context?", "completion": "During job execution in a Shared Application Context, Tapis relaxes its access constraints. However, all host authorizations are still enforced. The underlying operating systems' and persistent storage systems' authentication and authorization mechanisms are unchanged, so users have no more low-level access than they would otherwise. This means that users are not conferred any special privileges on application-specified resources outside of job execution and relaxed authorization checking applies only to systems and file paths referenced in the application definition."}