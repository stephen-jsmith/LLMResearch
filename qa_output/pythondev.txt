1. Question: What is Tapipy?
   Answer: Tapipy is a Python library for interacting with an instance of the Tapis API framework. It allows for automatic token refreshing, verbose error messages regarding endpoint inputs, and up-to-date syntax for all services.

2. Question: Where is Tapipy hosted?
   Answer: Tapipy is hosted on PyPi and its package can be found at https://pypi.org/project/tapipy/. Its Github repository is at https://github.com/tapis-project/tapipy.

3. Question: How do you initialize a Tapis client object?
   Answer: To initialize a Tapis client object, you replace `your_tacc_username` and `your_tacc_password` with your TACC username and password. This command will authenticate you with Tapis for your respective `base_url` and store your retrieved token for later `tapipy` calls.

4. Question: How do you create a Python Tapis client for a user?
   Answer: You can create a Python Tapis client for a user by using the following command: 
   ```
   t = Tapis(base_url= "https://tacc.tapis.io",
          username="your_tacc_username",
          password="your_tacc_password")
   ```

5. Question: How do you get tokens once you're initialized?
   Answer: You can get tokens once you're initialized by using the command `t.get_tokens()`. This will give you your own access token and the placeholder `your_tacc_username` will be replaced with the username you used.

6. Question: How do you use Tapipy?
   Answer: To use Tapipy, you can reference the Tapis Live Docs to browse all service specifications. Tapipy is generated off of these specific specifications, so this is your most up-to-date reference on `tapipy` functionality.

7. Question: What are the special user query parameters and headers in Tapipy?
   Answer: Tapipy recognizes two special keyword arguments to all of its methods that correspond to Tapis API calls. They are `_tapis_headers` - a dictionary-like object of header names and values, and `_tapis_query_parameters` - a dictionary-like object of query parameter names and values.

8. Question: What additional parameters does Tapipy allow?
   Answer: Tapipy allows for spec file customization in `Tapis` client initialization. This includes `resource_set`, `custom_spec_dict`, `download_latest_specs`, and `spec_dir`.

9. Question: What is the `resource_set` parameter in Tapipy?
   Answer: The `resource_set` parameter in Tapipy determines which set of resource to use, defaults to `tapipy`. If a `custom_spec_dictionary` is used, it is appended to this resource_set.

10. Question: What is the `custom_spec_dict` parameter in Tapipy?
    Answer: The `custom_spec_dict` parameter in Tapipy allows users to modify the base resource set urls, add new resources to the set, and allows local resources.1. Question: What does the custom parameter setting do in the abaco resource?
   Answer: The custom parameter setting in the abaco resource overwrites the resource definition in the tapipy resource set and downloads it if it doesn't exist. The same applies to the longhorn resource. This allows the Tapis client to have access to all specs in tapipy like normal, but with a modified abaco and a new longhorn resource.

2. Question: How can Tapipy be instantiated with only a Tapis access token?
   Answer: Tapipy can be instantiated with only a Tapis access token by providing the base_url and the token. This is useful when you have a created token and don't want to provide a username and password.

3. Question: How does Tapipy organize spec dictionaries?
   Answer: Tapipy uses a cache to organize spec dictionaries as pickled files and has the ability to accept custom spec files. By default, Tapipy keeps a set of base spec files in the `{tapipyInstallDir}/specs` folder.

4. Question: What are the two methods to refresh specs in Tapipy?
   Answer: The two methods to refresh specs in Tapipy are `t.update_spec_cache()` which refreshes the client's `t.resource_set` resources and saves to `t.spec_dir`, and `tapipy.tapis.update_spec_cache()` which refreshes specified resources and caches to the inputted `spec_dir`.

5. Question: How can you activate automatic token refreshing in Tapipy?
   Answer: To activate automatic token refreshing in Tapipy, you must have a Tapis client created to provide `client_id` and `client_key` at Tapis initialization. 

6. Question: How can you create a client in Tapipy?
   Answer: You can create a client in Tapipy by running `t.authenticator.create_client()` after creating your normal Tapis client.

7. Question: How can you initialize a Tapis client with refresh capabilities?
   Answer: You can initialize a Tapis client with refresh capabilities by providing `client_id` and `client_key` in the Tapis client initialization.

8. Question: How can you upload a file to a specific path in a user's Tapis system?
   Answer: You can upload a file to a specific path in a user's Tapis system using the `t.files.insert` operation in Tapipy 1.3.2, which has native support for `multipart/form-data` input data and headers.

9. Question: What is TapisService?
   Answer: TapisService is a Python plugin for Tapipy which extends Tapipy with additional service-oriented Python modules. This plugin is useful when creating a Tapis service or using a Tapis service account.

10. Question: What should be included in the git repository when creating a new Tapis v3 service?
    Answer: When creating a new Tapis v3 service, the git repository should include a description of all possible service configurations in the `configschema.json` file, values for the configs in the `config-local.json` file, any packages required by your service in the `requirements.txt` file, and a Dockerfile to build your service.1. Question: How do you inherit from the flaskbase image?
   Answer: You can inherit from the flaskbase image by using the command: FROM: tapis/flaskbase.

2. Question: How do you set the name of the API for use by some of the TapisService modules?
   Answer: You can set the name of the API by using the command: ENV TAPIS_API <api_name>.

3. Question: How do you install additional requirements for the service?
   Answer: You can install additional requirements for the service by copying the requirements.txt file to /home/tapis/requirements.txt and running pip install -r /home/tapis/requirements.txt.

4. Question: How do you copy the service source code?
   Answer: You can copy the service source code by copying the configschema.json, config-local.json, and service to /home/tapis.

5. Question: How do you run the service as a non-root Tapis user?
   Answer: You can run the service as a non-root Tapis user by running the command: RUN chown -R tapis:tapis /home/tapis and then switching to the Tapis user with the command: USER tapis.

6. Question: How do you create a migration skeleton for services using Postgres?
   Answer: You can create a migration skeleton by running the following commands from a terminal: docker run -it --entrypoint=bash --network=<service>-api_<service> -v $(pwd):/home/tapis/mig tapis/tenants-api.

7. Question: How do you initialize migrations inside the container?
   Answer: You can initialize migrations inside the container by running the following commands: $ cd mig; flask db init, $ flask db migrate, $ flask db upgrade, $ exit.

8. Question: How do you create a Dockerfile for migrations?
   Answer: You can create a Dockerfile for migrations by copying the migrations to /home/tapis/migrations and setting the ENTRYPOINT to ["flask", "db"].

9. Question: How do you write a docker-compose.yml file to facilitate local development?
   Answer: The information provided does not specify how to write a docker-compose.yml file.

10. Question: How do you access TapisService modules?
    Answer: You can access TapisService modules by installing `tapisservice` with `pip install tapisservice`. Services can import modules directly from this package.1. Question: What does the `tapisservice.logs` module provide?
   Answer: The `tapisservice.logs` module provides a basic logger with a file and stdout handler.

2. Question: How can you use the `tapisservice.logs` module?
   Answer: To use it, create an instance of the logger in each module where you want to add logs by calling the `get_logger` function with the module name.

3. Question: What does the `tapisservice.util` module provide for REST APIs?
   Answer: The `tapisservice.util` module provides the `TapisApi` class and the `flask_errors_dict` dict and `handle_error()` function.

4. Question: How can you set up error handling to use the `handle_error()` function?
   Answer: You can set up error handling to use the `handle_error()` function by adding the following to your `api.py` module: `api.handle_error = handle_error, api.handle_exception = handle_error, api.handle_user_exception = handle_error`.

5. Question: What should you understand if you're developing with TapisService?
   Answer: If you're developing with TapisService then please ensure you understand the following topics: Logging, Error Handling, basic flask "app" object, TapisApi object, and Working with TapisService.

6. Question: What is Flaskbase?
   Answer: Flaskbase is the original implementation of a `tapisservice` like scheme where we provide necessary helper functions for dealing with Tapis.

7. Question: What frameworks are supported by `tapisservice`?
   Answer: `Flask`, `FastAPI`, and `Django` are supported by `tapisservice`.

8. Question: How can you use the `tapisservice` authn/authz?
   Answer: You can use the `tapisservice` authn/authz by providing callbacks for authn and authz which will have access to g object fields.

9. Question: What is the global `g` object in Flask and FastAPI?
   Answer: `tapisservice` uses request thread local `g` objects to expose data globally. This object is created per request and lasts the lifespan of said request.

10. Question: What are the key variables to use in the global `g` object?
    Answer: Key variables to use are: `g.request_tenant_id`, `g.request_username`, and `g.token_claims`.1. Question: What does `g.request_username` represent?
   Answer: `g.request_username` represents `g.username` if not service and `g.x_tapis_user` otherwise.

2. Question: What is the value of `g.x_tapis_user`?
   Answer: `g.x_tapis_user` is the value of the `X-Tapis-Tenant` header.

3. Question: What does `g.request_tenant_id` represent?
   Answer: `g.request_tenant_id` represents `g.tenant_id` if not service and `g.x_tapis_tenant` otherwise.

4. Question: What is the value of `g.x_tapis_tenant`?
   Answer: `g.x_tapis_tenant` is the value of the `X-Tapis-User` header.

5. Question: What happens to the values of `g.request_tenant_id` and `g.request_username` when service accounts send "on behalf of" requests?
   Answer: The values change to the `x_tapis_*` variants.

6. Question: Who can complete these "on behalf of" requests?
   Answer: Only services within the same site may complete these "on behalf of" requests.

7. Question: How can a service account make use of the `tapipy` client?
   Answer: A service account can still make use of the `tapipy` client, but some changes will apply.

8. Question: How can you use the tenant and username from the client, meaning the service's tenant and username?
   Answer: You can use the command `t.systems.get_systems(_tapis_set_x_headers_from_service = True)`.

9. Question: How can you use a specified _x_tapis_user and _x_tapis_tenant_id rather than the service's values?
   Answer: You can use the command `t.systems.get_systems(_x_tapis_user = "cgarcia", _x_tapis_tenant_id = "tacc")`.

10. Question: What are the remaining variables useful for?
    Answer: The remaining variables are useful for debugging or defining exactly who sent a request and exactly how.