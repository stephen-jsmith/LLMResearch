{"prompt": "What is the role of a primary site in a Tapis installation?", "completion": "The primary site in a Tapis installation runs a complete set of Tapis API services and all associated 3rd-party services, such as databases and message queues. The creation of new sites is coordinated through the primary site, and the primary site runs the unique instance of the Sites and Tenants API which maintain the complete registry of all sites and tenants in the installation. The primary site of the main Tapis installation is hosted at the Texas Advanced Computing Center at the tapis.io domain."}

{"prompt": "What are the requirements for an associate site in a Tapis installation?", "completion": "Associate sites are required to run the Tapis Security Kernel, a compliant Token Generator API, and one or more additional Tapis services. Each associate site is managed and operated by a separate, partner institution. For Tapis services not run at the associate site, the corresponding service at the primary site is used for requests. In this way, partner institutions can choose which Tapis services to run within their institution and leverage the primary site deployment for the rest."}

{"prompt": "How does authentication work in the Tapis platform?", "completion": "The default authenticator provided by the Tapis project is based on OAuth2, and this is the authentication mechanism in place for the `tacc` tenant. The OAuth2-based authentication services are available via the `/v3/oauth2` endpoints. OAuth uses different *grant type flows* for generating tokens in different situations. The simplest case is that you want to generate a Tapis OAuth token for yourself; to do this you can use the *password* grant flow, providing your username and password."}{"prompt": "How do I create an OAuth2 client?", "completion": "To create a client, make a POST request to the Clients API. All fields are optional; if you do not pass a `client_id` or `client_key` in the request, the clients API will generate random ones for you. In order to use the `authorize_code` grant type you will need to set the `callback_url` when registering your client."}
{"prompt": "How can I delete an OAuth2 client?", "completion": "You can delete clients you are no longer using by passing the `client_id` of the client to be deleted. A null response is returned from a successful delete request."}
{"prompt": "How does the authorization code grant type work in OAuth2?", "completion": "The authorization code grant type enables applications to generate tokens on behalf of users without the applications needing to possess user credentials. There are two controllers that must be written to support the authorization code grant type flow. The first controller determines if the user already has a valid access token and directs them to the OAuth2 authorization server when they do not. The second controller processes the authorization code returned and retrieves an access token on the user's behalf. The final step is to register a client with a `callback_url` parameter equal to the URL within your web application where it will handle converting authorization codes into access tokens."}